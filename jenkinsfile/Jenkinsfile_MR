pipeline {
    agent { label 'linux' }

    options { 
        buildDiscarder(logRotator(numToKeepStr: '135', daysToKeepStr: '21'))
        gitLabConnection('GitLabConnectionJenkins')
    }

    environment {
        BUILD_OPTIONS = ' '
        APIURL_TO_TEST = ' '
    }

    stages {
        stage('clean previous runs'){
            steps{
                deleteDir()
            }
        }
        stage('Get build parameters'){
            parallel{
                stage('Get current build description'){
                    steps{
                        script{
                            println "${env.gitlabMergeRequestDescription}"
                            env.currentBuildDescription = currentBuild.description
                        }
                    }
                }
                stage('Get build options'){
                    when {
                        allOf {
                            expression { env.gitlabTriggerPhrase != null }
                            expression { env.gitlabTriggerPhrase.contains('BUILD_OPTIONS') }
                        }
                    }
                    steps {
                        script{
                            BUILD_OPTIONS = sh(script: 'echo "$gitlabTriggerPhrase" | grep BUILD_OPTIONS | awk -F "BUILD_OPTIONS="  \'{print \$2}\' | cut -d"\"" -f2', returnStdout: true).trim()
                            println BUILD_OPTIONS
                        }
                    }
                    post{
                        always {
                            script{                        
                                if (currentBuild.currentResult == 'FAILURE'){
                                    addGitLabMRComment(comment: ":red_circle: ${env.JOB_NAME} FAILURE when getting the additional build parameters :worried:<br/>Build results: [Jenkins [${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}" )
                                }
                            }
                        }
                    }
                }

                stage('Get SDK branch'){
                    when {
                        expression { 
                            env.gitlabMergeRequestDescription.contains('SDK_BRANCH_TO_TEST')
                        }
                    }
                    steps {
                        script{
                            env.SDK_BRANCH = sh(script: 'echo "$gitlabMergeRequestDescription" | grep SDK_BRANCH_TO_TEST | awk -F "SDK_BRANCH_TO_TEST="  \'{print \$2}\' | cut -d" " -f1', returnStdout: true).trim()
                            println SDK_BRANCH
                            if (SDK_BRANCH == ""){
                                echo "SDK_BRANCH was not found on description so develop will be used by default"
                            }
                        }
                    }
                    post{
                        always {
                            script{                        
                                if (currentBuild.currentResult == 'FAILURE'){
                                    addGitLabMRComment(comment: ":red_circle: ${env.JOB_NAME} FAILURE when getting the SDK branch :worried:<br/>Build results: [Jenkins [${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}" )
                                }
                            }
                        }
                    }
                }

                stage('Get Android branch'){
                    when {
                        expression { 
                            env.gitlabMergeRequestDescription.contains('ANDROID_BRANCH_TO_TEST')
                        }
                    }
                    steps {
                        script{
                            env.ANDROID_BRANCH = sh(script: 'echo "$gitlabMergeRequestDescription" | grep ANDROID_BRANCH_TO_TEST | awk -F "ANDROID_BRANCH_TO_TEST="  \'{print \$2}\' | cut -d" " -f1', returnStdout: true).trim()
                            println ANDROID_BRANCH
                            if (ANDROID_BRANCH == ""){
                                echo "ANDROID_BRANCH was not found on description so develop will be used by default"
                            }
                        }
                    }
                    post{
                        always {
                            script{                        
                                if (currentBuild.currentResult == 'FAILURE'){
                                    addGitLabMRComment(comment: ":red_circle: ${env.JOB_NAME} FAILURE when getting the Android branch :worried:<br/>Build results: [Jenkins [${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}" )
                                }
                            }
                        }
                    }
                }
                
                stage('Get iOS branch'){
                    when {
                        expression { 
                            env.gitlabMergeRequestDescription.contains('IOS_BRANCH_TO_TEST')
                        }
                    }
                    steps {
                        script{
                            env.IOS_BRANCH = sh(script: 'echo "$gitlabMergeRequestDescription" | grep IOS_BRANCH_TO_TEST | awk -F "IOS_BRANCH_TO_TEST="  \'{print \$2}\' | cut -d" " -f1', returnStdout: true).trim()
                            println IOS_BRANCH
                            if (IOS_BRANCH == ""){
                                echo "IOS_BRANCH was not found on description so develop will be used by default"
                            }
                        }
                    }
                    post{
                        always {
                            script{                        
                                if (currentBuild.currentResult == 'FAILURE'){
                                    addGitLabMRComment(comment: ":red_circle: ${env.JOB_NAME} FAILURE when getting the iOS branch :worried:<br/>Build results: [Jenkins [${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}" )
                                }
                            }
                        }
                    }
                }

                stage('Get API URL'){
                    when {
                        expression { 
                            env.gitlabMergeRequestDescription.contains('USE_APIURL_TO_TEST')
                        }
                    }
                    steps {
                        script{
                            APIURL_TO_TEST = sh(script: 'echo "$gitlabMergeRequestDescription" | grep USE_APIURL_TO_TEST | awk -F "USE_APIURL_TO_TEST="  \'{print \$2}\' | cut -d" " -f1', returnStdout: true).trim()
                            println APIURL_TO_TEST
                            if (APIURL_TO_TEST == ""){
                                APIURL_TO_TEST = "https://g.api.mega.co.nz/"
                                echo "APIURL_TO_TEST was not found on description so ${APIURL_TO_TEST} will be used by default"
                            }
                            echo "APIURL_TO_TEST will be ${APIURL_TO_TEST}"
                        }
                    }
                    post{
                        always {
                            script{                        
                                if (currentBuild.currentResult == 'FAILURE'){
                                    addGitLabMRComment(comment: ":red_circle: ${env.JOB_NAME} FAILURE when getting the API url :worried:<br/>Build results: [Jenkins [${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}" )
                                }
                            }
                        }
                    }
                }

            }
        }


        stage('Build MEGAchat'){
            parallel{
                stage('Build Linux'){
                    when{
                        anyOf {
                            expression { env.gitlabTriggerPhrase != null && ( env.gitlabTriggerPhrase == 'build compilation' || env.gitlabTriggerPhrase.startsWith('build compilation linux'))  }
                            allOf{
                                expression { env.gitlabTriggerPhrase == null }
                                triggeredBy "GitlabWebhookCause" 
                            }
                        }
                    }
                    steps {
                        updateGitlabCommitStatus(name: 'Linux build & test', state: 'running')
                        script {
                            echo "Triggering MEGAchat job for Linux."
                            def triggeredBuild = build job: 'MEGAchat-linux64-MR', wait: true, propagate: false, parameters: [
                                string(name: 'SOURCE_BRANCH', value: "${env.gitlabSourceBranch}"),
                                string(name: 'TARGET_BRANCH', value: "${env.gitlabTargetBranch}"),
                                string(name: 'BUILD_OPTIONS', value: "${BUILD_OPTIONS}"),
                                string(name: 'APIURL_TO_TEST', value: "${APIURL_TO_TEST}"),
                                string(name: 'BUILD_DESCRIPTION', value: "${env.currentBuildDescription}"),
                                booleanParam(name: 'BUILD_LINUX', value: true)
                                ].plus(env.SDK_BRANCH ? [string(name: 'SDK_BRANCH', value: "${SDK_BRANCH}")] : [])

                            env.TRIGGERED_BUILD_URL_LINUX = triggeredBuild.getAbsoluteUrl()
                            env.TRIGGERED_PROJECT_NAME_LINUX = triggeredBuild.getProjectName()
                            env.TRIGGERED_BUILD_DISPLAY_NAME_LINUX = triggeredBuild.getFullDisplayName()
                        }
                    }
                    post{
                        always {
                            script{
                                if (currentBuild.currentResult == 'SUCCESS'){
                                    addGitLabMRComment(comment: ":white_check_mark: ${env.TRIGGERED_PROJECT_NAME_LINUX} :penguin: <b>Linux</b> SUCCEEDED :muscle:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_LINUX}]](${env.TRIGGERED_BUILD_URL_LINUX})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'Linux build & test', state: 'success')
                                }                                
                                if (currentBuild.currentResult == 'FAILURE'){
                                    addGitLabMRComment(comment: ":red_circle: ${env.TRIGGERED_PROJECT_NAME_LINUX} :penguin: <b>Linux</b> FAILURE  :worried:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_LINUX}]](${env.TRIGGERED_BUILD_URL_LINUX})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'Linux build & test', state: 'failed')
                                    error "Marking parent job as failed because ${env.TRIGGERED_BUILD_DISPLAY_NAME_LINUX}: ${env.TRIGGERED_BUILD_URL_LINUX} has failed"
                                }
                                if (currentBuild.currentResult == 'ABORTED'){
                                    addGitLabMRComment(comment: ":interrobang: ${env.TRIGGERED_PROJECT_NAME_LINUX} :penguin: <b>Linux</b> ABORTED  :confused:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_LINUX}]](${env.TRIGGERED_BUILD_URL_LINUX})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'Linux build & test', state: 'canceled')
                                    error "Marking parent job as aborted because ${env.TRIGGERED_BUILD_DISPLAY_NAME_LINUX}: ${env.TRIGGERED_BUILD_URL_LINUX} has been canceled"
                                }                                
                                if (currentBuild.currentResult == 'UNSTABLE'){
                                    addGitLabMRComment(comment: ":interrobang: ${env.TRIGGERED_PROJECT_NAME_LINUX} :penguin: <b>Linux</b> UNSTABLE  :confused:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_LINUX}]](${env.TRIGGERED_BUILD_URL_LINUX})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'Linux build & test', state: 'failed')
                                    error "Marking parent job as failed because ${env.TRIGGERED_BUILD_DISPLAY_NAME_LINUX}: ${env.TRIGGERED_BUILD_URL_LINUX} has failed"
                                }
                            }

                        }
                    }
                }

                stage('Build Android'){
                    when {
                        anyOf {
                            expression { env.gitlabTriggerPhrase != null && ( env.gitlabTriggerPhrase == 'build compilation' || env.gitlabTriggerPhrase.startsWith('build compilation android'))  }
                            allOf{
                                expression { env.gitlabTriggerPhrase == null }
                                triggeredBy "GitlabWebhookCause" 
                            }
                        }
                    }
                    steps {
                        updateGitlabCommitStatus(name: 'Android build', state: 'running')
                        script {
                            echo "Triggering MEGAchat job for Android App."
                            def triggeredBuild = build job: 'MEGAchat-crossAndroid-MR', wait: true, propagate: false, parameters: [
                                string(name: 'SOURCE_BRANCH', value: "${env.gitlabSourceBranch}"),
                                string(name: 'TARGET_BRANCH', value: "${env.gitlabTargetBranch}"),
                                string(name: 'BUILD_OPTIONS', value: "${BUILD_OPTIONS}"),
                                string(name: 'APIURL_TO_TEST', value: "${APIURL_TO_TEST}"),
                                string(name: 'BUILD_DESCRIPTION', value: "${env.currentBuildDescription}"),
                                booleanParam(name: 'BUILD_ANDROID', value: true)
                                ].plus(env.ANDROID_BRANCH ? [string(name: 'ANDROID_BRANCH', value: "${ANDROID_BRANCH}")] : []).plus(env.SDK_BRANCH ? [string(name: 'SDK_BRANCH', value: "${SDK_BRANCH}")] : [])

                            env.TRIGGERED_BUILD_URL_ANDROID = triggeredBuild.getAbsoluteUrl()
                            env.TRIGGERED_PROJECT_NAME_ANDROID = triggeredBuild.getProjectName()
                            env.TRIGGERED_BUILD_DISPLAY_NAME_ANDROID = triggeredBuild.getFullDisplayName()
                        }
                    }
                    post{
                        always {
                            script{
                                if (currentBuild.currentResult == 'SUCCESS'){
                                    addGitLabMRComment(comment: ":white_check_mark: ${env.TRIGGERED_PROJECT_NAME_ANDROID} :penguin: <b>Android</b> SUCCEEDED :muscle:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_ANDROID}]](${env.TRIGGERED_BUILD_URL_ANDROID})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'Android build', state: 'success')
                                }                                
                                if (currentBuild.currentResult == 'FAILURE'){
                                    addGitLabMRComment(comment: ":red_circle: ${env.TRIGGERED_PROJECT_NAME_ANDROID} :penguin: <b>Android</b> FAILURE  :worried:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_ANDROID}]](${env.TRIGGERED_BUILD_URL_ANDROID})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'Android build', state: 'failed')
                                    error "Marking parent job as failed because ${env.TRIGGERED_BUILD_DISPLAY_NAME_ANDROID}: ${env.TRIGGERED_BUILD_URL_ANDROID} has failed"
                                }
                                if (currentBuild.currentResult == 'ABORTED'){
                                    addGitLabMRComment(comment: ":interrobang: ${env.TRIGGERED_PROJECT_NAME_ANDROID} :penguin: <b>Android</b> ABORTED  :confused:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_ANDROID}]](${env.TRIGGERED_BUILD_URL_ANDROID})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'Android build', state: 'canceled')
                                    error "Marking parent job as aborted because ${env.TRIGGERED_BUILD_DISPLAY_NAME_ANDROID}: ${env.TRIGGERED_BUILD_URL_ANDROID} has been canceled"
                                }                                
                                if (currentBuild.currentResult == 'UNSTABLE'){
                                    addGitLabMRComment(comment: ":interrobang: ${env.TRIGGERED_PROJECT_NAME_ANDROID} :penguin: <b>Android</b> UNSTABLE  :confused:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_ANDROID}]](${env.TRIGGERED_BUILD_URL_ANDROID})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'Android build', state: 'failed')
                                    error "Marking parent job as failed because ${env.TRIGGERED_BUILD_DISPLAY_NAME_ANDROID}: ${env.TRIGGERED_BUILD_URL_ANDROID} has failed"
                                }
                            }

                        }
                    }
                }

                stage('Build iOS'){
                    when {
                        anyOf {
                            expression { env.gitlabTriggerPhrase != null && ( env.gitlabTriggerPhrase == 'build compilation' || env.gitlabTriggerPhrase.startsWith('build compilation ios'))  }
                            allOf{
                                expression { env.gitlabTriggerPhrase == null }
                                triggeredBy "GitlabWebhookCause" 
                            }
                        }
                    }
                    steps {
                        updateGitlabCommitStatus(name: 'iOS build', state: 'running')
                        script {
                            echo "Triggering MEGAchat job for iOS."
                            def triggeredBuild = build job: 'MEGAchat-crossiOS-MR', wait: true, propagate: false, parameters: [
                                string(name: 'SOURCE_BRANCH', value: "${env.gitlabSourceBranch}"),
                                string(name: 'TARGET_BRANCH', value: "${env.gitlabTargetBranch}"),
                                string(name: 'BUILD_OPTIONS', value: "${BUILD_OPTIONS}"),
                                string(name: 'APIURL_TO_TEST', value: "${APIURL_TO_TEST}"),
                                string(name: 'BUILD_DESCRIPTION', value: "${env.currentBuildDescription}"),
                                booleanParam(name: 'BUILD_IOS', value: true)
                                ].plus(env.IOS_BRANCH ? [string(name: 'IOS_BRANCH', value: "${IOS_BRANCH}")] : []).plus(env.SDK_BRANCH ? [string(name: 'SDK_BRANCH', value: "${SDK_BRANCH}")] : [])

                            env.TRIGGERED_BUILD_URL_IOS = triggeredBuild.getAbsoluteUrl()
                            env.TRIGGERED_PROJECT_NAME_IOS = triggeredBuild.getProjectName()
                            env.TRIGGERED_BUILD_DISPLAY_NAME_IOS = triggeredBuild.getFullDisplayName()
                        }
                    }
                    post{
                        always {
                            script{
                                if (currentBuild.currentResult == 'SUCCESS'){
                                    addGitLabMRComment(comment: ":white_check_mark: ${env.TRIGGERED_PROJECT_NAME_IOS} :green_apple: <b>iOS</b> SUCCEEDED :muscle:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_IOS}]](${env.TRIGGERED_BUILD_URL_IOS})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'iOS build', state: 'success')
                                }                                
                                if (currentBuild.currentResult == 'FAILURE'){
                                    addGitLabMRComment(comment: ":red_circle: ${env.TRIGGERED_PROJECT_NAME_IOS} :green_apple: <b>iOS</b> FAILURE  :worried:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_IOS}]](${env.TRIGGERED_BUILD_URL_IOS})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'iOS build', state: 'failed')
                                    error "Marking parent job as failed because ${env.TRIGGERED_BUILD_DISPLAY_NAME_IOS}: ${env.TRIGGERED_BUILD_URL_IOS} has failed"
                                }
                                if (currentBuild.currentResult == 'ABORTED'){
                                    addGitLabMRComment(comment: ":interrobang: ${env.TRIGGERED_PROJECT_NAME_IOS} :green_apple: <b>iOS</b> ABORTED  :confused:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_IOS}]](${env.TRIGGERED_BUILD_URL_IOS})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'iOS build', state: 'canceled')
                                    error "Marking parent job as aborted because ${env.TRIGGERED_BUILD_DISPLAY_NAME_IOS}: ${env.TRIGGERED_BUILD_URL_IOS} has been canceled"
                                }                                
                                if (currentBuild.currentResult == 'UNSTABLE'){
                                    addGitLabMRComment(comment: ":interrobang: ${env.TRIGGERED_PROJECT_NAME_IOS} :green_apple: <b>iOS</b> UNSTABLE  :confused:<br/>Build results: [Jenkins [${env.TRIGGERED_BUILD_DISPLAY_NAME_IOS}]](${env.TRIGGERED_BUILD_URL_IOS})<br/>Commit: ${env.GIT_COMMIT}" )
                                    updateGitlabCommitStatus(name: 'iOS build', state: 'failed')
                                    error "Marking parent job as failed because ${env.TRIGGERED_BUILD_DISPLAY_NAME_IOS}: ${env.TRIGGERED_BUILD_URL_IOS} has failed"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
