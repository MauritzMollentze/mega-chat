def setCommitStatus(String pStatus, String errorHint = '') {
    switch (pStatus) {
        case 'running':
            pState = 'running'
            pMessage = ""
            break
        case 'success':
            pState = 'success'
            pMessage = ":white_check_mark: ${env.JOB_NAME} :penguin: <b>Linux</b> SUCCEEDED :muscle:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'aborted':
            pState = 'canceled'
            pMessage = ":interrobang: ${env.JOB_NAME} :penguin: <b>Linux</b> ABORTED :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'failure':
            pState = 'failed'
            pMessage = ":red_circle: ${env.JOB_NAME} :penguin: <b>Linux</b> FAILURE :worried:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'unstable':
            pState = 'failed'
            pMessage = ":interrobang: ${env.JOB_NAME} :penguin: <b>Linux</b> UNSTABLE :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        default:
            pState = 'failed'
            pMessage = ":interrobang: ${env.JOB_NAME} :penguin: <b>Linux</b> UNKNOWN :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
    }
    if (pMessage) {
        if (errorHint) {
            pMessage += '<br/> ' + errorHint
        }
        addGitLabMRComment(comment: pMessage)
    }
    updateGitlabCommitStatus(name: "${PIPELINE_NAME}", state: pState)
}

pipeline {
    agent { label 'linux && amd64 && webrtc' }
    options {
        timeout(time: 300, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '135', daysToKeepStr: '21'))
        gitLabConnection('GitLabConnectionJenkins')
    }
    environment {
        BUILD_OPTIONS = ' '
        APIURL_TO_TEST = ' '
        PIPELINE_NAME = 'Linux build & test'
    }
    stages {
        stage('clean previous runs and update gitlab commit status'){
            steps{
                deleteDir()
                setCommitStatus('running')
            }
        }
        stage('Get current build description'){
            steps{
                script{
                    println "${env.gitlabMergeRequestDescription}"
                    env.currentBuildDescription = currentBuild.description
                }
            }
        }
        stage('Get build options'){
            when {
                allOf {
                    expression { env.gitlabTriggerPhrase != null }
                    expression { env.gitlabTriggerPhrase.contains('BUILD_OPTIONS') }
                }
            }
            steps {
                script{
                    BUILD_OPTIONS = sh(script: 'echo "$gitlabTriggerPhrase" | grep BUILD_OPTIONS | awk -F "BUILD_OPTIONS="  \'{print \$2}\' | cut -d"\"" -f2', returnStdout: true).trim()
                    println BUILD_OPTIONS
                }
            }
            post{
                failure {
                    setCommitStatus('failure', 'Failure when getting the additional build parameters. Is `BUILD_OPTIONS` variable well defined?')
                }
                aborted {
                    setCommitStatus('aborted')
                }
            }
        }
        stage('Get SDK branch'){
            when {
                expression {
                    env.gitlabMergeRequestDescription.contains('SDK_BRANCH_TO_TEST')
                }
            }
            steps {
                script{
                    env.SDK_BRANCH = sh(script: 'echo "$gitlabMergeRequestDescription" | grep SDK_BRANCH_TO_TEST | awk -F "SDK_BRANCH_TO_TEST="  \'{print \$2}\' | cut -d" " -f1', returnStdout: true).trim()
                    println SDK_BRANCH
                    if (SDK_BRANCH == ""){
                        echo "SDK_BRANCH was not found on description so develop will be used by default"
                    }
                }
            }
            post{
                failure {
                    setCommitStatus('failure', 'Failure when getting SDK branch. Is `SDK_BRANCH` variable well defined?')
                }
                aborted {
                    setCommitStatus('aborted')
                }
            }
        }
        stage('Get API URL'){
            when {
                expression {
                    env.gitlabMergeRequestDescription.contains('USE_APIURL_TO_TEST')
                }
            }
            steps {
                script{
                    APIURL_TO_TEST = sh(script: 'echo "$gitlabMergeRequestDescription" | grep USE_APIURL_TO_TEST | awk -F "USE_APIURL_TO_TEST="  \'{print \$2}\' | cut -d" " -f1', returnStdout: true).trim()
                        println APIURL_TO_TEST
                    if (APIURL_TO_TEST == ""){
                        APIURL_TO_TEST = "https://g.api.mega.co.nz/"
                        echo "APIURL_TO_TEST was not found on description so ${APIURL_TO_TEST} will be used by default"
                    }
                    echo "APIURL_TO_TEST will be ${APIURL_TO_TEST}"
                }
            }
            post{
                failure {
                    setCommitStatus('failure', 'Failure when getting API URL. Is `APIURL_TO_TEST` variable well defined?')
                }
                aborted {
                    setCommitStatus('aborted')
                }
            }
        }
        stage('Checkout SDK and MEGAchat'){
            when{
                anyOf {
                    expression {
                        env.gitlabTriggerPhrase != null && ( env.gitlabTriggerPhrase == 'trigger compilation' || env.gitlabTriggerPhrase.startsWith('trigger compilation linux'))
                    }
                    allOf{
                        expression { env.gitlabTriggerPhrase == null }
                        triggeredBy "GitlabWebhookCause"
                    }
                }
            }
            steps {
                deleteDir()
                checkout scm
                updateGitlabCommitStatus(name: 'Linux build & test', state: 'running')
                dir('third-party/mega'){
                    sh "echo Cloning SDK branch ${SDK_BRANCH}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "origin/${SDK_BRANCH}"]],
                        userRemoteConfigs: [[ url: "git@code.developers.mega.co.nz:sdk/sdk.git", credentialsId: "12492eb8-0278-4402-98f0-4412abfb65c1" ]],
                        extensions: [
                            [$class: "UserIdentity",name: "jenkins", email: "jenkins@jenkins"]
                        ]
                    ])
                }
                script{
                    megachat_sources_workspace = WORKSPACE
                    sdk_sources_workspace = "${megachat_sources_workspace}/third-party/mega"
                }
            }
            post{
                failure {
                    setCommitStatus('failure')
                }
                aborted {
                    setCommitStatus('aborted')
                }
            }
        }
        stage('Build MEGAchat'){
            environment{
                WEBRTC_SRC="/home/jenkins/webrtc/src"
                PATH = "/home/jenkins/tools/depot_tools:${env.PATH}"
            }
            steps{
                dir(megachat_sources_workspace){
                    sh """
                        sed -i "s#MEGAChatTest#JenkinsCanSpam#g" tests/sdk_test/sdk_test.h
                        mkdir -p build
                    """
                }
                dir(sdk_sources_workspace){
                    sh """
                        ./autogen.sh
                        ./configure --disable-tests --enable-chat --enable-shared --without-pdfium --without-ffmpeg
                        sed -i "s#nproc#echo 1#" bindings/qt/build_with_webrtc.sh
                        cd bindings/qt && bash build_with_webrtc.sh all withExamples
                    """
                }

            }
            post{
                failure {
                    setCommitStatus('failure')
                }
                aborted {
                    setCommitStatus('aborted')
                }
                unstable {
                    setCommitStatus('unstable')
                }
            }
        }
        stage('Run MEGAchat and SDK tests'){
            environment {
                MEGA_PWD0 = credentials('MEGA_PWD_DEFAULT')
                MEGA_PWD1 = credentials('MEGA_PWD_DEFAULT')
                MEGA_PWD2 = credentials('MEGA_PWD_DEFAULT')
            }
            steps{
                lock(label: 'SDK_Test_Accounts', variable: 'ACCOUNTS_COMBINATION', quantity: 1, resource: null){
                    dir("${megachat_sources_workspace}/build/subfolder"){
                        script{
                            def accounts_array = "${env.ACCOUNTS_COMBINATION}".split(',')
                            env.MEGA_EMAIL0 = accounts_array[0]
                            env.MEGA_EMAIL1 = accounts_array[1]
                            env.MEGA_EMAIL2 = accounts_array[2]
                            echo "${env.ACCOUNTS_COMBINATION}"
                        }
                        sh """
                            ln -sfr ${megachat_sources_workspace}/build/MEGAchatTests/megachat_tests megachat_tests
                            ulimit -c unlimited
                            ./megachat_tests ${params.APIURL_TO_TEST} || FAILED=1
                            if [ -n "\$FAILED" ]; then
                                maxTime=10
                                startTime=`date +%s`
                                while [ ! -e "core" -o -n "\$( lsof core 2>/dev/null )" ] && [ \$( expr `date +%s` - \$startTime ) -lt \$maxTime ]; do
                                    echo "Waiting for core dump..."
                                    sleep 1
                                done
                                if [ -e "core" ] && [ -z "\$( lsof core 2>/dev/null )" ]; then
                                    echo "Processing core dump..."
                                    echo thread apply all bt > backtrace
                                    echo quit >> backtrace
                                    gdb -q ./megachat_tests core -x ${megachat_sources_workspace}/build/subfolder/backtrace
                                    tar chvzf core.tar.gz core megachat_tests
                                fi
                            fi
                            gzip -c test.log > test_${BUILD_ID}.log.gz || :
                            rm test.log || :
                            if [ ! -z "\$FAILED" ]; then
                                false
                            fi
                        """
                    }
                }
            }
            post {
                always{
                     archiveArtifacts artifacts: 'build/subfolder/test*.log*, build/subfolder/core.tar.gz', fingerprint: true
                }
                success {
                    setCommitStatus('success')
                }
                failure {
                    setCommitStatus('failure')
                }
                aborted {
                    setCommitStatus('aborted')
                }
                unstable {
                    setCommitStatus('unstable')
                }
            }
        }
    }
}
// vim: syntax=groovy tabstop=4 shiftwidth=4
